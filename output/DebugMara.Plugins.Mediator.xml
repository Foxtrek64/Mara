<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mara.Plugins.Mediator</name>
    </assembly>
    <members>
        <member name="T:Mara.Plugins.Mediator.MediatorPlugin">
            <summary>
            The <see cref="T:Mara.Plugins.Mediator.MediatorPlugin"/> translates Discord Socket events into Mediator notifications and requests.
            </summary>
        </member>
        <member name="P:Mara.Plugins.Mediator.MediatorPlugin.Name">
            <inheritdoc />
        </member>
        <member name="P:Mara.Plugins.Mediator.MediatorPlugin.Version">
            <inheritdoc />
        </member>
        <member name="P:Mara.Plugins.Mediator.MediatorPlugin.Description">
            <inheritdoc />
        </member>
        <member name="M:Mara.Plugins.Mediator.MediatorPlugin.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="T:Mara.Plugins.Mediator.Messaging.IScopedMediator">
            <summary>
            An <see cref="T:MediatR.IMediator"/> designed for sending scoped requests and notifications.
            </summary>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.IScopedMediator.Send``1(Microsoft.Extensions.DependencyInjection.IServiceScope,MediatR.IRequest{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously send a request to a single handler.
            </summary>
            <typeparam name="TResponse">The type of response to expect.</typeparam>
            <param name="scope">A service scope to reuse for the request.</param>
            <param name="request">The request itself.</param>
            <param name="cancellationToken">The cancellation token for this operation.</param>
            <returns>A task that represents the send operation. The task result contains the handler response.</returns>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.IScopedMediator.Send(Microsoft.Extensions.DependencyInjection.IServiceScope,System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously send a request to a single handler.
            </summary>
            <param name="scope">A service scope to reuse for the request.</param>
            <param name="request">The request itself.</param>
            <param name="cancellationToken">The cancellation token for this operation.</param>
            <returns>A task that represents the send operation. The task result contains the handler response.</returns>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.IScopedMediator.Publish``1(Microsoft.Extensions.DependencyInjection.IServiceScope,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request to multiple handlers.
            </summary>
            <typeparam name="TNotification">The type of notification to send.</typeparam>
            <param name="scope">A service scope to reuse for the request.</param>
            <param name="notification">The notification itself.</param>
            <param name="cancellationToken">The cancellation token for this operation.</param>
            <returns>A task that represents the notification operation. The task result contains the handler response.</returns>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.IScopedMediator.Publish(Microsoft.Extensions.DependencyInjection.IServiceScope,System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request to multiple handlers.
            </summary>
            <param name="scope">A service scope to reuse for the request.</param>
            <param name="notification">The notification itself.</param>
            <param name="cancellationToken">The cancellation token for this operation.</param>
            <returns>A task that represents the notification operation. The task result contains the handler response.</returns>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.IScopedMediator.CreateStream``1(Microsoft.Extensions.DependencyInjection.IServiceScope,MediatR.IStreamRequest{``0},System.Threading.CancellationToken)">
            <summary>
            Creates a stream via a single stream handler.
            </summary>
            <typeparam name="TResponse">The type of response to expect.</typeparam>
            <param name="scope">A service scope to reuse for the request.</param>
            <param name="request">The request itself.</param>
            <param name="cancellationToken">The cancellation token for this operation.</param>
            <returns>A task that represents the send operation. The task result contains the handler response.</returns>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.IScopedMediator.CreateStream(Microsoft.Extensions.DependencyInjection.IServiceScope,System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates a stream via an object request to a stream handler.
            </summary>
            <param name="scope">A service scope to reuse for the request.</param>
            <param name="request">The request itself.</param>
            <param name="cancellationToken">The cancellation token for this operation.</param>
            <returns>A task that represents the send operation. The task result contains the handler response.</returns>
        </member>
        <member name="T:Mara.Plugins.Mediator.Messaging.LoggingNotificationHandlerBase`1">
            <summary>
            A base type for a notification handler which automatically logs the the starting and stopping of handling.
            </summary>
            <typeparam name="TNotification">The type of notification to handle.</typeparam>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.LoggingNotificationHandlerBase`1.#ctor(Microsoft.Extensions.Logging.ILogger{Mara.Plugins.Mediator.Messaging.LoggingNotificationHandlerBase{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Mara.Plugins.Mediator.Messaging.LoggingNotificationHandlerBase`1"/> class.
            </summary>
            <param name="logger">A logger for this instance.</param>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.LoggingNotificationHandlerBase`1.Handle(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.LoggingNotificationHandlerBase`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Handles a notification asynchronously.
            </summary>
            <param name="request">The notification.</param>
            <param name="cancellationToken">The cancellation token for this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> representing the result of the operation.</returns>
        </member>
        <member name="T:Mara.Plugins.Mediator.Messaging.LoggingRequestHandlerBase`2">
            <summary>
            A base type for a request handler which automatically logs the the starting and stopping of handling.
            </summary>
            <typeparam name="TRequest">The type of request to handle.</typeparam>
            <typeparam name="TResponse">The type of response to return.</typeparam>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.LoggingRequestHandlerBase`2.#ctor(Microsoft.Extensions.Logging.ILogger{Mara.Plugins.Mediator.Messaging.LoggingRequestHandlerBase{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Mara.Plugins.Mediator.Messaging.LoggingRequestHandlerBase`2"/> class.
            </summary>
            <param name="logger">A logger for this instance.</param>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.LoggingRequestHandlerBase`2.Handle(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.LoggingRequestHandlerBase`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Handles a request asynchronously.
            </summary>
            <param name="request">The notification.</param>
            <param name="cancellationToken">The cancellation token for this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> representing the result of the operation.</returns>
        </member>
        <member name="T:Mara.Plugins.Mediator.Messaging.MessagingSetup">
            <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add scoped messaging.
            </summary>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.MessagingSetup.AddMessagingScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a scoped messaging service to the current <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <typeparam name="TEntryPoint">The entry point, typically Program.cs.</typeparam>
            <typeparam name="TMediator">A scoped mediator instance.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> register with.</param>
            <returns>The current <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>, for chaining.</returns>
        </member>
        <member name="T:Mara.Plugins.Mediator.Messaging.Notifications.Channels.ChannelCreatedNotification">
            <inheritdoc />
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.Notifications.Channels.ChannelCreatedNotification.#ctor(Remora.Discord.API.Abstractions.Gateway.Events.IChannelCreate)">
            <inheritdoc />
        </member>
        <member name="T:Mara.Plugins.Mediator.Messaging.ScopedMediator">
            <summary>
            An <see cref="T:MediatR.IMediator"/> which creates a new scope for each request.
            </summary>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Mara.Plugins.Mediator.Messaging.ScopedMediator"/> class.
            </summary>
            <param name="serviceScopeFactory">An <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory"/> from which to create scopes.</param>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.Send``1(MediatR.IRequest{``0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.Send``1(Microsoft.Extensions.DependencyInjection.IServiceScope,MediatR.IRequest{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.Send(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.Send(Microsoft.Extensions.DependencyInjection.IServiceScope,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.Publish``1(``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.Publish``1(Microsoft.Extensions.DependencyInjection.IServiceScope,``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.Publish(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.Publish(Microsoft.Extensions.DependencyInjection.IServiceScope,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.CreateStream``1(MediatR.IStreamRequest{``0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.CreateStream``1(Microsoft.Extensions.DependencyInjection.IServiceScope,MediatR.IStreamRequest{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.CreateStream(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Mara.Plugins.Mediator.Messaging.ScopedMediator.CreateStream(Microsoft.Extensions.DependencyInjection.IServiceScope,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
    </members>
</doc>
